version: "3.8"

volumes:
  pg_data_production:
  static_volume:
  media_volume:

services:
  db:
    image: postgres:13.10
    env_file: .env
    volumes:
      - pg_data_production:/var/lib/postgresql/data
    healthcheck: # ДОБАВЬТЕ ЭТО
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: dyachenkomark/kittygram_backend
    env_file: .env
    volumes:
      - static_volume:/app/collected_static
      - media_volume:/app/media/
    depends_on: # ДОБАВЬТЕ ЭТО
      db:
        condition: service_healthy
    command: > # ДОБАВЬТЕ КОМАНДУ
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate --noinput &&
             gunicorn --bind 0.0.0.0:8000 kittygram_backend.wsgi:application"

  frontend:
    image: dyachenkomark/kittygram_frontend
    command: cp -r /app/build/. /static/
    volumes:
      - static_volume:/static/

  gateway:
    image: dyachenkomark/kittygram_gateway
    volumes:
      - static_volume:/static/
      - media_volume:/media/
    ports:
      - 9000:80
    depends_on: # ДОБАВЬТЕ ЭТО
      - backend
      - frontend
